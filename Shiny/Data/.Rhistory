}
else if (N %% 2!=0)
{
X<-(3*N+1)/2
}
i<-i+1
}
return(X)
}
collatz_conjecture(111)
collatz_conjecture<-function(N)
{
for(i in 1:5)
{
if(N %% 2==0)
{
X=N/2
}
else if (N %% 2!=0)
{
X<-(3*N+1)/2
}
return(X)
}
return(X)
}
collatz_conjecture(111)
collatz_conjecture(111)
collatz_conjecture<-function(N)
{
for(i in 1:5)
{
if(N %% 2==0)
{
N=N/2
}
else if (N %% 2!=0)
{
N<-(3*N+1)/2
}
}
return(N)
}
collatz_conjecture(111)
collatz_conjecture<-function(N)
{
for(i in 1:5)
{
if(N %% 2==0)
{
N=N/2
}
else if (N %% 2!=0)
{
N<-(3*N+1)/2
}
return(N)
}
}
collatz_conjecture(111)
collatz_conjecture<-function(N)
{
for(i in 1:5)
{
if(N %% 2==0)
{
N=N/2
}
else if (N %% 2!=0)
{
N<-(3*N+1)/2
}
}
X<-N
return(X)
}
collatz_conjecture(111)
pbinom(2,3,.5)
rbinom(2,3,.5)
rbinom(3,2,.5)
sample.space<-c("H","T")
theta<-0.5
N<-20
flips<-sample(sample.space,size = N,replace = TRUE,prob = c(theta,1-theta))
flips
sample.space<-c("H","T")
theta<-0.5
N<-3
flips<-sample(sample.space,size = N,replace = TRUE,prob = c(theta,1-theta))
flips
flips
flips
flips
flips<-rbinom(n=N,size = 1,prob =theta)
flips
flips
flips
flips
1/(1+exp(-0.5))
1/(1+exp(1))
1/(1+exp(-1))
hotel <- read.csv("F:/Hotel Dataset.csv")
View(hotel)
hotel$H1Total_rev<-hotel$H1Room.Revenue+hotel$H1Food.and.Beverage.Revenue+hotel$H1Other.Revenue
View(hotel)
summary(hotel)
hotel2<-hotel
hotel2$H1Occupied.Rooms<-as.numeric(as.character(hotel2$H1Occupied.Rooms))
View(hotel2)
hotel2<-hotel
str(hotel2$H1Occupied.Rooms)
as.numeric(hotel2$H1Occupied.Rooms)
as.character(hotel2$H1Occupied.Rooms)
ch<-as.character(hotel2$H1Occupied.Rooms)
as.numeric(hotel2$H1Occupied.Rooms)
as.numeric(ch)
tax <- read.csv("F:/Historic_Secured_Property_Tax_Rolls.csv")
View(tax)
lib
library(devtools)
install_github("andreacirilloac/ramazon")
library(ramazon)
ramazon(public_DNS ="ec2-52-87-237-147.compute-1.amazonaws.com", key_pair_name = "SurajInstance")
url<-"http://www.alocalattorney.com/find-an-attorney/"
html_source<-readLines(url,encoding = "UTF-8")
alllinks<-c()
links<-xpathSApply(html_parsed,"//a/@href")
library(SnowballC)
library(RCurl)
library(XML)
library(RSelenium)
html_parsed<-htmlTreeParse(url,useInternalNodes = T)
html_parsed<-htmlTreeParse(url,useInternalNodes = T)
alllinks<-c()
links<-xpathSApply(html_parsed,"//a/@href")
match<- which(grepl("lawyer",links))
links<-unique(links[match])
alllinks<-c(alllinks,links)
save.image()
name<-xpathSApply(df, "//div[@class='item-title']//h3", xmlValue)
name<-xpathSApply(html_parsed, "//div[@class='item-title']//h3", xmlValue)
category<-xpathSApply(html_parsed, "//span[@class='item-category']", xmlValue)
lawyers<-as.data.frame(cbind(name,category))
save.image()
links<-as.data.frame(alllinks)
View(links)
gsub("/","",alllinks)
gsub("\"http://","",alllinks)
alllinks<-links[128:254,]
links<-xpathSApply(html_parsed,"//a/@href")
match<- which(grepl("lawyer",links))
links<-unique(links[match])
alllinks<-c()
alllinks<-c(alllinks,links)
url2<-"http://42lawyers.com/alabama/"
html_parsed2<-htmlTreeParse(url2,useInternalNodes = T)
alllinks<-c()
links<-xpathSApply(html_parsed,"//a/@href")
links2<-xpathSApply(html_parsed2,"//a/@href")
alllinks2<-as.data.frame(links2)
View(alllinks2)
match<- which(grepl("alabama",links2))
links2<-unique(links[match])
alllinks2<-c()
alllinks<-c(alllinks,links)
alllinks2<-c(alllinks2,links2)
alllinks2
library(SnowballC)
library(RCurl)
library(XML)
library(RSelenium)
save.image()
sample_submission <- read.csv("F:/Kaggle/Santander/sample_submission.csv")
View(sample_submission)
setwd("F:/Blog/VGSales/Shiny/Data")
load("F:/Blog/VGSales/Shiny/Data/.RData")
ts_sales
arima_sales
library(forecast)
fit.arima<-arima(ts_sales,order=c(0,0,1))
fit.arima
fore<-forecast(fit.arima,h=3)
fore
fore<-forecast(fit.arima,h=5)
fore
plot(fore)
pred<-as.numeric(fore$mean)
pred
upper<-fore$upper[,"95%"]
upper
lower<-fore$lower[,"95%"]
trend<-as.numeric(fore$fitted)
trend
fit.arima<-auto.arima(ts_sales)
fore<-forecast(fit.arima,h=5)
fore
pred<-as.numeric(fore$mean)
ts
ts_sales
fit.arima<-auto.arima(log10(ts_sales),approximation = FALSE,trace = FALSE)
fore<-forecast(fit.arima,h=5)
fore
plot(ts_sales)
plot(log10(ts_sales))
plot(ts_sales)
plot(log10(ts_sales))
plot(diff(log10(ts_sales)))
par(mfrow=c(1,2))
acf(ts(diff(log10(ts_sales))),main="ACF ")
pacf(ts(diff(log10(ts_sales))),main="PACF ")
ARIMAfit<-auto.arima(log10(ts_sales),approximation = FALSE,trace = FALSE)
fore<-forecast(ARIMAfit,h=n.ahead)
n.ahead=5
fore<-forecast(ARIMAfit,h=n.ahead)
pred<-as.numeric(fore$mean)
pred <- predict(ARIMAfit, n.ahead = 5)
pred
pred<-as.numeric(fore$mean)
pred2 <- predict(ARIMAfit, n.ahead = 5)
pred2$pred
shiny::runApp('F:/Blog/VGSales/Shiny')
save.image()
runApp('F:/Blog/VGSales/Shiny')
runApp('F:/Blog/VGSales/Shiny')
View(year_country_sales)
runApp('F:/Blog/VGSales/Shiny')
View(sales_year_Others)
runApp('F:/Blog/VGSales/Shiny')
sales_year_global
sales_year_global$Year<-as.Date(sales_year_global$Year,"%Y")
str(sales_year_global$Year)
sales_year_global$Year<-as.Date(as.character(sales_year_global$Year),"%Y")
sales_year_global
ts_sales<-ts(sales_year_global$total_sales,start = 1983)
plot(ts_sales)
par(mfrow(1,1))
par(mfrow=c(1,1))
plot(ts_sales)
ARIMAfit<-auto.arima(log10(ts_sales),approximation = FALSE,trace = FALSE)
n.ahead=5
pred <- predict(ARIMAfit, n.ahead = n.ahead)
pred
fore<-forecast(ARIMAfit,h=n.ahead)
upper<-fore$upper[,"95%"]
upper
lower<-fore$lower[,"95%"]
lower
trend<-as.numeric(fore$fitted)
trend
predicted<-pred$pred
predicted
fore<-forecast(ARIMAfit,h=n.ahead)
predicted<-as.numeric(fore$mean)
predicted
data.frame(actual=c(log10(sales_year_global$total_sales),rep(NA,n.ahead),trend=c(trend,rep(NA,n.ahead))))
data.frame(actual=c(log10(sales_year_global$total_sales),rep(NA,n.ahead)),trend=c(trend,rep(NA,n.ahead)))
data.frame(actual=c(log10(sales_year_global$total_sales),rep(NA,n.ahead)),trend=c(trend,rep(NA,n.ahead)),pred=c(rep(NA,nrow(sales_year_global)),pred))
rep(NA,nrow(sales_year_global))
c(rep(NA,nrow(sales_year_global),pred)
c(rep(NA,nrow(sales_year_global)),pred)
c(rep(NA,nrow(sales_year_global)),pred)
c(rep(NA,nrow(sales_year_global)),predicted)
data.frame(actual=c(log10(sales_year_global$total_sales),rep(NA,n.ahead)),trend=c(trend,rep(NA,n.ahead)),predicted=c(rep(NA,nrow(sales_year_global)),predicted))
data.frame(actual=c(log10(sales_year_global$total_sales),rep(NA,n.ahead)),trend=c(trend,rep(NA,n.ahead)),predicted=c(rep(NA,nrow(sales_year_global)),predicted),lower=c(rep(NA,nrow(sales_year_global)),lower))
data.frame(actual=c(log10(sales_year_global$total_sales),rep(NA,n.ahead)),trend=c(trend,rep(NA,n.ahead)),predicted=c(rep(NA,nrow(sales_year_global)),predicted),lower=c(rep(NA,nrow(sales_year_global)),lower),upper=c(rep(NA,nrow(sales_year_global)),upper))
data.frame(actual=c(log10(sales_year_global$total_sales),rep(NA,n.ahead)),trend=c(trend,rep(NA,n.ahead)),predicted=c(rep(NA,nrow(sales_year_global)),predicted),lower=c(rep(NA,nrow(sales_year_global)),lower),upper=c(rep(NA,nrow(sales_year_global)),upper),year=c(sales_year_global$Year,max(sales_year_global$Year)+(1:n.ahead)))
sales_year_global$Year<-as.POSIXlt(sales_year_global$Year)
sales_year_global$Year
sales_year_global
sales_year_global<-as.data.frame(aggregate(vgsales_nintendo$Global_Sales,by=list(Year=vgsales_nintendo$Year),FUN=sum))
sales_year_global
sales_year_global<- sales_year_global[-nrow( sales_year_global),]
colnames(sales_year_global)<-c("Year","total_sales")
library(lubridate)
sales_year_global$Year<-ymd(sales_year_global$Year)
sales_year_global$Year<-ymd(as.character(sales_year_global$Year))
sales_year_global$Year<-y(as.character(sales_year_global$Year))
runApp('F:/Blog/VGSales/Shiny')
runApp('F:/Blog/VGSales/Shiny')
sales_year_global$Year
sales_year_global<-as.data.frame(aggregate(vgsales_nintendo$Global_Sales,by=list(Year=vgsales_nintendo$Year),FUN=sum))
sales_year_global<- sales_year_global[-nrow( sales_year_global),]
colnames(sales_year_global)<-c("Year","total_sales")
str(sales_year_global)
sales_year_global$Year<-as.Date(as.character(sales_year_global$Year))
sales_year_global$Year<-as.Date(as.character(sales_year_global$Year),"%Y")
str(sales_year_global)
year_add<-year(sales_year_global)+1
year(sales_year_global$Year)
year(max(sales_year_global$Year))
year(max(sales_year_global$Year))+1
ts_sales<-ts(sales_year_global$total_sales,start = 1983)
ARIMAfit<-auto.arima(log10(ts_sales),approximation = FALSE,trace = FALSE)
n.ahead=5
fore<-forecast(ARIMAfit,h=n.ahead)
predicted<-as.numeric(fore$mean)
upper<-fore$upper[,"95%"]
lower<-fore$lower[,"95%"]
trend<-as.numeric(fore$fitted)
output<-data.frame(actual=c(log10(sales_year_global$total_sales),rep(NA,n.ahead)),
trend=c(trend,rep(NA,n.ahead)),
predicted=c(rep(NA,nrow(sales_year_global)),predicted),
lower=c(rep(NA,nrow(sales_year_global)),lower),
upper=c(rep(NA,nrow(sales_year_global)),upper),
year=c(sales_year_global$Year,year(max(sales_year_global$Year))+(1:n.ahead)))
output
plot(output$year, output$actual, type = "l", col = "grey", main = title,
xlab = "Time", ylab = "Log 10 of Total Sales", xlim = range(output$year),
)
plot(output$year, output$actual, type = "l", col = "grey", main = "Prediction of Global Video Game Sales",
xlab = "Time", ylab = "Log 10 of Total Sales", xlim = range(output$year),
)
grid()
lines(output$year, output$trend, col = "yellowgreen")
lines(output$year, output$prediction, col = "green")
lines(output$year, output$lower, col = "blue")
lines(output$year, output$upper, col = "blue")
legend("bottomleft", col = c("grey", "yellowgreen", "green","blue"), lty = 1, c("Actual", "Trend", "Forecast", "Lower/Upper Bound"))
legend("bottomleft", col = c("grey", "yellowgreen", "green","blue"), lty = 1, c("Actual", "Trend", "Forecast", "Lower/Upper Bound"),cex=1)
legend("bottomleft", col = c("grey", "yellowgreen", "green","blue"), lty = 1, c("Actual", "Trend", "Forecast", "Lower/Upper Bound"),cex=1,xjust=0,yjust=1)
legend("bottomleft", col = c("grey", "yellowgreen", "green","blue"), lty = 0, c("Actual", "Trend", "Forecast", "Lower/Upper Bound"))
legend("bottomleft", col = c("grey", "yellowgreen", "green","blue"), lty = 1, c("Actual", "Trend", "Forecast", "Lower/Upper Bound"))
legend("topright", col = c("grey", "yellowgreen", "green","blue"), lty = 1, c("Actual", "Trend", "Forecast", "Lower/Upper Bound"))
legend("topright", col = c("grey", "yellowgreen", "green","blue"), lty = 1, c("Actual", "Trend", "Forecast", "Lower/Upper Bound"))
plot(output$year, output$actual, type = "l", col = "grey", main = "Prediction of Global Video Game Sales",
xlab = "Time", ylab = "Log 10 of Total Sales", xlim = range(output$year),
)
grid()
plot(output$year, output$actual, type = "l",lwd=2, col = "grey", main = "Prediction of Global Video Game Sales",
xlab = "Time", ylab = "Log 10 of Total Sales", xlim = range(output$year))
plot(output$year, output$actual, type = "l",lwd=2, col = "red", main = "Prediction of Global Video Game Sales",
xlab = "Time", ylab = "Log 10 of Total Sales", xlim = range(output$year))
sales_year_global<-as.data.frame(aggregate(vgsales_nintendo$Global_Sales,by=list(Year=vgsales_nintendo$Year),FUN=sum))
sales_year_global<- sales_year_global[-nrow( sales_year_global),]
colnames(sales_year_global)<-c("Year","total_sales")
str(sales_year_global)
sales_year_global$Year<-as.numeric(as.character(sales_year_global$Year))
str(sales_year_global)
ts_sales<-ts(sales_year_global$total_sales,start = 1983)
plot(ts_sales)
ARIMAfit<-auto.arima(log10(ts_sales),approximation = FALSE,trace = FALSE)
n.ahead=5
fore<-forecast(ARIMAfit,h=n.ahead)
predicted<-as.numeric(fore$mean)
upper<-fore$upper[,"95%"]
lower<-fore$lower[,"95%"]
trend<-as.numeric(fore$fitted)
output<-data.frame(actual=c(log10(sales_year_global$total_sales),rep(NA,n.ahead)),
trend=c(trend,rep(NA,n.ahead)),
predicted=c(rep(NA,nrow(sales_year_global)),predicted),
lower=c(rep(NA,nrow(sales_year_global)),lower),
upper=c(rep(NA,nrow(sales_year_global)),upper),
year=c(sales_year_global$Year,max(sales_year_global$Year)+(1:n.ahead)))
output
plot(output$year, output$actual, type = "l",lwd=2, col = "red", main = "Prediction of Global Video Game Sales",
xlab = "Time", ylab = "Log 10 of Total Sales", xlim = range(output$year))
grid()
lines(output$year, output$trend, col = "brown",lwd=2)
lines(output$year, output$trend, col = "orange",lwd=2)
lines(output$year, output$trend, col = "green",lwd=2)
lines(output$year, output$predicted, col = "brown",lwd=3)
lines(output$year, output$predicted, col = "brown",lwd=2)
lines(output$year, output$predicted, col = "brown",lwd=5)
lines(output$year, output$predicted, col = "brown",lwd=2)
lines(output$year, output$lower, col = "blue",lwd=2)
lines(output$year, output$lower, col = "blue")
lines(output$year, output$upper, col = "blue",lwd=2)
plot(output$year, output$actual, type = "l",lwd=2, col = "red", main = "Prediction of Global Video Game Sales",
xlab = "Time", ylab = "Log 10 of Total Sales", xlim = range(output$year))
grid()
lines(output$year, output$trend, col = "green",lwd=2,lty=4)
lines(output$year, output$trend, col = "brown",lwd=2,lty=4)
lines(output$year, output$predicted, col = "blue",lwd=2)
plot(output$year, output$actual, type = "l",lwd=2, col = "black", main = "Prediction of Global Video Game Sales",
xlab = "Time", ylab = "Log 10 of Total Sales", xlim = range(output$year))
grid()
lines(output$year, output$trend, col = "red",lwd=2,lty=4)
lines(output$year, output$predicted, col = "blue",lwd=2)
lines(output$year, output$lower, col = "brown")
lines(output$year, output$lower, col = "brown",lwd=2)
lines(output$year, output$upper, col = "brown".lwd=2)
lines(output$year, output$upper, col = "brown",lwd=2)
legend("topleft", col = c("black", "red", "blue","brown"), lty = c(1,4,1,1), legend = c("Actual", "Trend", "Forecast", "Lower/Upper Bound"),cex=0.5)
legend("topleft", col = c("black", "red", "blue","brown"), lty = c(1,4,1,1), legend = c("Actual", "Trend", "Forecast", "Lower/Upper Bound"),cex=0.75)
legend("topleft", col = c("black", "red", "blue","brown"), lty = c(1,4,1,1), legend = c("Actual", "Trend", "Forecast", "Lower/Upper Bound"),cex=0.5)
plot(output$year, output$actual, type = "l",lwd=2, col = "black", main = "Prediction of 5 Years Global Video Game Sales",
xlab = "Time", ylab = "Log 10 of Total Sales", xlim = range(output$year))
grid()
lines(output$year, output$trend, col = "red",lwd=2,lty=4)
lines(output$year, output$predicted, col = "blue",lwd=2)
lines(output$year, output$lower, col = "brown",lwd=2)
lines(output$year, output$upper, col = "brown",lwd=2)
legend("topleft", col = c("black", "red", "blue","brown"), lty = c(1,4,1,1), legend = c("Actual", "Trend", "Forecast", "Lower/Upper Bound"),cex=0.5)
runApp('F:/Blog/VGSales/Shiny')
runApp('F:/Blog/VGSales/Shiny')
runApp('F:/Blog/VGSales/Shiny')
runApp('F:/Blog/VGSales/Shiny')
View(vgsales_nintendo)
str(sales_year_global)
ts_sales<-ts(sales_year_global$total_sales,start = 1983)
ARIMAfit<-auto.arima(ts_sales,approximation = FALSE,trace = FALSE)
n.ahead=5
fore<-forecast(ARIMAfit,h=n.ahead)
predicted<-as.numeric(fore$mean)
upper<-fore$upper[,"95%"]
lower<-fore$lower[,"95%"]
trend<-as.numeric(fore$fitted)
output<-data.frame(actual=c(sales_year_global$total_sales,rep(NA,n.ahead)),
trend=c(trend,rep(NA,n.ahead)),
predicted=c(rep(NA,nrow(sales_year_global)),predicted),
lower=c(rep(NA,nrow(sales_year_global)),lower),
upper=c(rep(NA,nrow(sales_year_global)),upper),
year=c(sales_year_global$Year,max(sales_year_global$Year)+(1:n.ahead)))
tail(output)
tail(output,n=10)
runApp('F:/Blog/VGSales/Shiny')
output
output2<-output
output2$year<-as.Date(as.character(output2$year),format = "%Y")
str(output2)
runApp('F:/Blog/VGSales/Shiny')
output2
output2<-output
output2$year<-as.Date(output2$year,"%Y")
library(zoo)
as.yearmon(output2$year)
as.year(output2$year)
as.yearmon(output2$year)
as.Date(output2$year)
runApp('F:/Blog/VGSales/Shiny')
ts_sales<-ts(sales_year_global$total_sales,start = 1983)
ARIMAfit<-auto.arima(ts_sales,approximation = FALSE,trace = FALSE)
n.ahead=5
fore<-forecast(ARIMAfit,h=n.ahead)
predicted<-as.numeric(fore$mean)
upper<-fore$upper[,"95%"]
lower<-fore$lower[,"95%"]
trend<-as.numeric(fore$fitted)
output<-data.frame(Year=c(sales_year_global$Year,max(sales_year_global$Year)+(1:n.ahead)),
Actual=c(sales_year_global$total_sales,rep(NA,n.ahead)),
Trend=c(trend,rep(NA,n.ahead)),
Predicted=c(rep(NA,nrow(sales_year_global)),predicted)
)
output
output$Year<-as.yearmon(output$Year)
output
output_10years<-tail(output,n=10)
output_10years
str(output_10years)
as.Date(output_10years$Year)
output_10years$Year<-as.Date(output_10years$Year)
str(output_10years)
runApp('F:/Blog/VGSales/Shiny')
runApp('F:/Blog/VGSales/Shiny')
runApp('F:/Blog/VGSales/Shiny')
runApp('F:/Blog/VGSales/Shiny')
runApp('F:/Blog/VGSales/Shiny')
runApp('F:/Blog/VGSales/Shiny')
runApp('F:/Blog/VGSales/Shiny')
runApp('F:/Blog/VGSales/Shiny')
runApp('F:/Blog/VGSales/Shiny')
runApp('F:/Blog/VGSales/Shiny')
runApp('F:/Blog/VGSales/Shiny')
runApp('F:/Blog/VGSales/Shiny')
ts_sales
ARIMAfit<-auto.arima(ts_sales,approximation = FALSE,trace = FALSE)
par(mfrow=c(1,2))
acf(ts(ARIMAfit$residuals),main="ACF Residuals")
pacf(ts(ARIMAfit$residuals),main="PACF Residuals")
runApp('F:/Blog/VGSales/Shiny')
runApp('F:/Blog/VGSales/Shiny')
runApp('F:/Blog/VGSales/Shiny')
runApp('F:/Blog/VGSales/Shiny')
which(publishers=="Unknown")
publishers[publishers=="Unknown"]
publishers[!grepl("Unknown")]
publishers
uk<-which(publishers=="Unknown")
uk
publishers[-uk,]
publishers[!uk,]
publisher_list
publisher_list[!publisher_list$V1=="Unknown"]
publisher_list[!publisher_list$V1=="Unknown",]
runApp('F:/Blog/VGSales/Shiny')
runApp('F:/Blog/VGSales/Shiny')
runApp('F:/Blog/VGSales/Shiny')
runApp('F:/Blog/VGSales/Shiny')
STLfit<-stl(ts_sales,s.window = 256)
STLfit<-stl(ts_sales)
STLfit<-stl(ts_sales,s.window = "period")
new_ts<-log(ts_sales)
STLfit<-stl(new_ts,s.window = "period")
STLfit<-stl(new_ts,s.window = 'periodic')
etsFit<-ets(ts_sales)
fore<-forecast(etsFit,h=5)
fore
fore$mean
fore$upper
fore$upper[,"95%"]
fore$fitted
fore$mean
fore$upper
fore
fore_ets<-forecast(etsFit,h=5)
fore_ets
fore_ets$mean
as.numeric(fore_ets$mean)
as.numeric(fore$fitted)
runApp('F:/Blog/VGSales/Shiny')
runApp('F:/Blog/VGSales/Shiny')
runApp('F:/Blog/VGSales/Shiny')
